/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
//  ==== Virtual Interfaces ====
/**
\defgroup   arm_cmvp Virtual Interfaces
\brief      Virtual Interfaces on Arm Fixed Virtual Platforms (FVPs)
\details

The **Virtual Interfaces** in Arm FVPs implement various CPU peripherals that allow to use external resources for stimulating the firmware application. Following interfaces are available and explained in details in corresponding sections:

  - The \ref arm_vio interface controls simple binary state I/O such as LED and switches.
  - The \ref arm_vsi provides up to 8 channels for data streaming.
  - The \ref arm_vsocket connects the user application to [BSD sockets](https://en.wikipedia.org/wiki/Berkeley_sockets) on the Host computer for IP network connectivity.

Both \ref arm_vio "VIO" and \ref arm_vsi "VSI" connect to Python and enable flexible scripting for test automation.

![AVH Virtual Interfaces](./images/Virtual_Interfaces.png "FVPs with Virtual Interfaces")

\defgroup arm_vio Virtual Input/Output (VIO)
\ingroup arm_cmvp
\brief Controls simple I/O such as LED and switches
\details

The **Virtual Input/Output Interface (VIO)** implements a register-based peripheral for simple digital I/Os. It can be used to simulate control of such items as LEDs, switches, digital signals and others. Figure below demonstrates the concept.

\image html ./images/vio_structure.png

The following files define the access to the VIO peripheral.

File                                | Description
:-----------------------------------|:-----------------------------------
[./interface/include/arm_vio.h](https://github.com/ARM-software/AVH/blob/main/interface/include/arm_vio.h)       | \ref arm_vio_api "VIO API" header file
[./interface/python/arm_vio.py](https://github.com/ARM-software/AVH/blob/main/interface/python/arm_vio.py)       | \ref arm_vio_py "VIO Python interface" script template
[./interface/vio/vio_fvp.c](https://github.com/ARM-software/AVH/blob/main/interface/vio/vio_fvp.c)           | Implementation of CMSIS-Driver VIO for Arm FVPs

A read or write access to a VIO peripheral via its \ref arm_vio_api "API" triggers execution of a corresponding function in the Python script that implements the \ref arm_vio_py "VIO Python interface" instance. The concept is shown on the figure below.

\image html "using_vio_uml.png" "Using VIO peripheral"

\defgroup arm_vio_pyenv Python environment
\ingroup arm_vio
\brief Python environment for Arm FVPs
\details

Arm FVPs require an installation of <b>Python 3.9</b> for running the Python virtual interfaces. If you are using a Windows machine you can use an embedded Python installation in FVPs root directory, otherwise a system installation is required.
Additional Python packages can be added using \em pip. In case you are using embedded Python installation see section: \ref embedded-pip-vio

# Known issues
Some Python packages can't be imported directly in the Python virtual interfaces, because they are incompatible with Python sub-interpreters (e.g. \em numpy). Possible workaround for this issue is to split the Python module into client and server scripts.

# Install additional packages in embedded Python {#embedded-pip-vio}
By default the embedded Python installation on Windows does not support installation of new packages using pip. To enable installing new packages follow the steps described below.
- Download [get-pip.py](https://bootstrap.pypa.io/get-pip.py) to the FVPs root directory.
- Uncomment the following line in the \b python39._pth file.
  \code {.sh}
  import site
  \endcode
- Open command prompt in the FVPs root directory and run the following command.
  \code {.sh}
  .\python.exe get-pip.py
  \endcode
- Install new packages using:
  \code {.sh}
  .\python.exe -m pip install <package>
  \endcode
  The packages will be installed in <code>Lib\\site-packages</code> subfolder.

\defgroup arm_vio_api VIO API
\ingroup arm_vio
\brief Virtual Input/Output (VIO) API
\details

The VIO peripheral is accessed using the \ref ARM_VIO_Type structure that defines registers for the following components:
  - Signal output, for example for LED simulation
  - Signal input, for example for buttons
  - Value registers for digital sensors and controls

One VIO peripheral instance is mapped into the memory of a Cortex-M system, for example:

\code
/* Memory mapping of VIO peripheral */
#define ARM_VIO_BASE            (0x4FEF0000UL)                          /*!< VIO Base Address */
#define ARM_VIO                 ((ARM_VIO_Type *)ARM_VIO_BASE)          /*!< VIO struct */

\endcode

The \ref ARM_VIO_Type structure is defined in *arm_vio.h* file as follows:

\code
/// Structure type to access the virtual input/output.
typedef struct
{
  /// Signal Output
  struct {
    __IOM uint32_t mask;        /*!< (R/W) Bit Mask */
    __OM  uint32_t signal;      /*!< (-/W) Signal Value */
  } SignalOut;
 
  /// Signal Input
  struct {
    __IOM uint32_t mask;        /*!< (R/W) Bit Mask */
    __IM  uint32_t signal;      /*!< (R/-) Signal Value */
  } SignalIn;
 
  __IOM int32_t Value[64];      /*!< (R/W) Value (32-bit) */
 
} ARM_VIO_Type;
\endcode

@{

\def ARM_VIO_BASE
\def ARM_VIO

\struct ARM_VIO_Type
\details
The **ARM_VIO_Type** structure provides access to the VIO peripheral registers.

@}

\var ARM_VIO_Type::SignalOut
\details
Structure for output signal.


\var ARM_VIO_Type::SignalIn
\details
Structure for input signal.

\var ARM_VIO_Type::Value
\details
Index array for digital I/O values.

\defgroup arm_vio_py VIO Python interface
\ingroup arm_vio
\brief      VIO python interface.
\details

The Python interface described in this section triggers upon peripheral register accesses of the \ref arm_vio_api.

The path to the python script implementing the interface shall be provided to the target in the model configuration paramater `v_path` that depending on the model is part of the `mps2_board`, `mps3_board` or `mps4_board` component. Section \ref Execution gives an example.

*/
