/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
//  ==== Virtual Interfaces ====
/**
\defgroup   arm_cmvp Virtual Peripherals
\brief      Virtual Interfaces on VHT
\details

The **Virtual Interfaces** are memory-mapped implementations of  that simulate a user application application running on a virtual Cortex processor.

\defgroup arm_vio Virtual Input/Output (VIO)
\ingroup arm_cmvp
\brief Controls simple I/O such as LED and switches
\details

The **Virtual I/O Interface (VIO)** implements the [**CMSIS-Driver VIO**](https://arm-software.github.io/CMSIS_5/Driver/html/group__vio__interface__gr.html) for Arm Virtual Hardware Targets. 

It consists of the following parts:

- \ref vio_header "arm_vio.h": defines platform-specific memory mapping to VIO access structure. It is provided as part of device support files. See in \ref Using.

- **[./interface/vio/vio_vht.c](https://github.com/ARM-software/VHT/tree/main/interface/vio/vio_vht.c)**: implements CMSIS-Driver VIO variant for Arm Virtual Hardware based on the VIO structure defined in *arm_vio.h*. It is provided as part of the VHT pack.

# Setup {#vio_setup}

Instructions below cover specifically VIO setup in a project on Arm Virtual Hardware Target.

- Install following software packs in your development environment, if not available yet:
 - ARM::CMSIS pack for access to CMSIS-Driver VIO API header (*cmsis_vio.h*)
 - Pack with target device support for access to *arm_vio.h*
 - Arm VHT pack for access to *vio_vht.c*.
 .
The packs can be found on [CMSIS Packs page](https://developer.arm.com/tools-and-software/embedded/cmsis/cmsis-packs).
- Add to the project the *CMSIS-Driver:VIO (API)* component that contains *vio_vht.c* file.

# Usage example {#vio_example}

After \ref vio_setup "VIO setup" in the project, the interface can be fully used as described in [CMSIS-Driver VIO documentation](
https://arm-software.github.io/CMSIS_5/Driver/html/group__vio__interface__gr.html#details).

For example to control virtual LEDs:

\code
#include "cmsis_vio.h"                  // ::CMSIS Driver:VIO
 
int main (void) {
 
  vioInit();
  vioSetSignal(vioLED0, vioLEDon);
  // ...
  vioSetSignal(vioLED0, vioLEDoff);
}
\endcode


# Template header file {#vio_header}

Below is a reference header file arm_vio.h that defines \ref arm_vio mapping.

The actual implementation can vary depending on the target architecture and is typically provided with the device support files for the target VHTs.

\include arm_vio.h

*/
