/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
//  ==== Virtual Interfaces ====
/**
\defgroup   arm_cmvp Virtual Peripherals
\brief      Virtual Interfaces on VHT
\details

The **Virtual Interfaces** are memory-mapped implementations of  that simulate a user application application running on a virtual Cortex processor.

\defgroup arm_vio Virtual Input/Output (VIO)
\ingroup arm_cmvp
\brief Controls simple I/O such as LED and switches
\details

The **Virtual I/O Interface (VIO)** implements the [**CMSIS-Driver VIO**](https://arm-software.github.io/CMSIS_5/Driver/html/group__vio__interface__gr.html) for Arm Virtual Hardware Targets. It consists of the following files:

- \ref vio_header "arm_vio.h": defines platform-specific memory mapping to VIO access structure. It is provided as part of device support files.

- **[vio_vht.c](https://github.com/ARM-software/VHT/tree/main/interface/vio/vio_vht.c)**: implements CMSIS-Driver VIO variant for Arm Virtual Hardware based on the mapping defined in *arm_vsi.h*. It is provided as part of VHT pack.


\section vio_setup Setup

 - Select Virtual Hardware device as the target in the project. See in \ref Using.
 - Install VHT pack and add to the project the *CMSIS-Driver:VIO:VHT* component that contains *vio_vht.c* file.

\section vio_example Usage example

After \ref vio_setup "VIO setup" in the project, the interface can be fully used as described in [CMSIS-Driver VIO documentation](
https://arm-software.github.io/CMSIS_5/Driver/html/group__vio__interface__gr.html#details).

For example to control virtual LEDs:

\code
#include "cmsis_vio.h"                  // ::CMSIS Driver:VIO
 
int main (void) {
 
  vioInit();
  vioSetSignal(vioLED0, vioLEDon);
  // ...
  vioSetSignal(vioLED0, vioLEDoff);
}
\endcode


\section vio_header Template header file

Below is a reference header file arm_vio.h that defines \ref arm_vio mapping.

The actual implementation can vary depending on the target architecture and is typically provided with the device support files for the target VHTs.

\include arm_vio.h

\if 0
\defgroup arm_vio_api VIO API
\ingroup arm_vio
\brief Virtual Input/Output (VIO) API
\details
TBD

@{

\def ARM_VIO
\details tbd

\struct ARM_VIO_Type
\details
The \ref ARM_VIO_Type structure provides access to the VIO peripheral registers.

@}

\var ARM_VIO_Type::SignalOut
\details
Structure for using with vioSetSignal function.

\b Example:

\code
#include <arm_vio.h>
#include <cmsis_vio.h>

ARM_VIO->SignalOut.mask = 
ARM_VIO->SignalOut.signal = 

vioSetSignal(ARM_VIO->SignalIn);

\var ARM_VIO_Type::SignalIn
\details
Structure for using with vioGetSignal function.

\b Example:

\code
#include <arm_vio.h>
#include <cmsis_vio.h>

ARM_VIO->SignalIn.mask = 
ARM_VIO->SignalIn.signal = 

vioGetSignal(ARM_VIO->SignalIn);

\endcode

\var ARM_VIO_Type::Value
\details
tbd


\defgroup vio_header Template header file
\ingroup arm_vio
\details

Below is a reference header file arm_vio.h that defines \ref arm_vio.

The actual implementation can vary depending on the target architecture and is typically provided with the device support files for the target VHTs.

\include arm_vio.h
\endif

*/

