/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
//  ==== VSI API ====
/**
\defgroup arm_vsi_api VSI embedded API
\ingroup arm_vsi
\brief Data streaming interface for Cortex-M applications to Python scripting
\details

@{

\struct ARM_VSI_Type
\details
The \ref ARM_VSI_Type structure provides access to the VSI peripheral registers. 
The peripheral provides the following registers:

  - **Regs** is array of registers that allows to implement peripheral specific operations.
  - **Timer** accesses a counting timer peripheral with 1MHz input clock that generates interrupts.
  - **DMA** is a virtual DMA controller which copies data from/to peripheral to/from memory.
  - **IRQ** is a group of registers that can enable and set/clear interrupt requests.

The **Timer** peripheral has the following registers:
  - **Control** the operation of the timer with the following control bits:
     - **Control.0** 0=stop timer and timer reset, 1=start timer
     - **Control.1** 0=on-shoot timer, 1=periodic timer by reloading Interval value
     - **Control.2** 0=no interrupt, 1=trigger interrupt at overflow, sets IRQ.Status=1
     - **Control.3** 0=no DMA transfer, 1=trigger DMA transfer at overflow
  - **Interval** value in microseconds for timer overflows
  - **Count** timer overflow counter, incremented when the time interval elapses and reset to 0 when timer starts.

The **DMA** peripheral has the following registers:
  - **Control** the operation of the DMA with the following control bits:
     - **Control.0** 0=disable DMA and reset DMA, 1=enable DMA
     - **Control.1** DMA transfer direction 0=peripheral to memory, 1=memory to peripheral
  - **Address** start address of the memory region
  - **BlockSize** number of bytes for each DMA transfer.
  - **BlockNum** number of blocks before the memory buffer rotates, next DMA transfer uses start address.
  - **BlockIndex** counts the total number of blocks transferred. It gets set to 0 when DMA is enabled and also when buffer rotates.

@}
*/

