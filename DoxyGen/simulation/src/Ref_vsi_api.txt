/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
//  ==== VSI API ====
/**
\defgroup arm_vsi_api VSI API
\ingroup arm_vsi
\brief Data streaming interface for Cortex-M applications to Python scripting
\details

The VSI peripheral is accessed using the \ref ARM_VSI_Type structure that defines registers for the following components:
  - Interrupt control
  - Timer peripheral with 1MHz input clock
  - DMA peripheral with block buffer handling
  - 64 user registers to implement bespoke functionality (i.e. for Audio, Video, or Sensor streaming)

Upto 8 VSI peripheral instances can be mapped into the memory of a Cortex-M system. For example for instance 0:

\code
#define ARM_VSI0_BASE   (0x4FF00000UL)                       /*!< VSI 0 Base Address */
#define ARM_VSI0        ((ARM_VSI_Type *)ARM_VSI0_BASE)      /*!< VSI 0 struct */

\endcode

The \ref ARM_VSI_Type structure is defined in *arm_vsi.h* file as follows:

\code
/// Structure type to access the virtual streaming interface
typedef struct
{
  /// Interrupt Request (IRQ)
  struct {
    __IOM uint32_t Enable;      /*!< (R/W) IRQ Enable */
    __OM  uint32_t Set;         /*!< (-/W) IRQ Set */
    __OM  uint32_t Clear;       /*!< (-/W) IRQ Clear */
    __IM  uint32_t Status;      /*!< (R/-) IRQ Status */
  } IRQ;
  uint32_t reserved1[60];
 
  /// Time counter with 1MHz input frequency
  struct {
    __IOM uint32_t Control;     /*!< (R/W) Timer Control */
    __IOM uint32_t Interval;    /*!< (R/W) Timer Interval Value (in microseconds) */
    __IM  uint32_t Count;       /*!< (R/-) Timer Overflow Count */
  } Timer;
  uint32_t reserved2[61];
 
  /// Direct Memory Access (DMA) Controller
  struct {
    __IOM uint32_t Control;     /*!< (R/W) DMA Control */
    __IOM uint32_t Address;     /*!< (R/W) DMA Memory Start Address */
    __IOM uint32_t BlockSize;   /*!< (R/W) DMA Block Size (in bytes, multiple of 4) */
    __IOM uint32_t BlockNum;    /*!< (R/W) DMA Number of Blocks (must be 2^n) */
    __IM  uint32_t BlockIndex;  /*!< (R/-) DMA Block Index */
  } DMA;
  uint32_t reserved3[59];
 
  __IOM uint32_t Regs[64];      /*!< (R/W) User Registers */
 
} ARM_VSI_Type;
\endcode

The ARM_VSI_Type::IRQ peripheral simulates an interrupt request. **Set** and **Clear** parameters have only write access and are used for triggering and clearing the interrupt. **Status** field indicates the interrupt state.

The ARM_VSI_Type::Timer peripheral is a simple counting timer with a 1MHz input frequency based on the time domain 
of the Arm Fast Model instruction set simulator. The **Count** value increments when the **Interval** value elapses.

The ARM_VSI_Type::DMA controller accesses a rotating memory buffer as shown in the diagram below. Each block transfer increments the **BlockIndex** value (restarts when the buffer rotates).

\image html "DMA_Buffer.png" "Structure of DMA memory buffer"


@{

\struct ARM_VSI_Type
\details
The \ref ARM_VSI_Type structure provides access to the VSI peripheral registers. 
The peripheral provides the following registers:

@}


\var ARM_VSI_Type::Regs
\details
Array of registers that allows to implement peripheral specific operations.


\var ARM_VSI_Type::Timer
\details
A simple counting timer with a 1MHz input frequency based on the time domain 
of the Arm Fast Model instruction set simulator. 

The **Timer** peripheral has the following registers:
  - **Control** the operation of the timer with the following control bits:
     - **Control.0** 0=stop timer and timer reset, 1=start timer
     - **Control.1** 0=on-shoot timer, 1=periodic timer by reloading Interval value
     - **Control.2** 0=no interrupt, 1=trigger interrupt at overflow, sets IRQ.Status=1
     - **Control.3** 0=no DMA transfer, 1=trigger DMA transfer at overflow
  - **Interval** value in microseconds for timer overflows
  - **Count** timer overflow counter, incremented when the time interval elapses and reset to 0 when timer starts.

\var ARM_VSI_Type::IRQ
\details
A group of registers that can enable and set/clear interrupt requests.

\var ARM_VSI_Type::DMA
\details
A virtual DMA controller which copies data from/to peripheral to/from memory.

It has the following registers:
  - **Control** the operation of the DMA with the following control bits:
     - **Control.0** 0=disable DMA and reset DMA, 1=enable DMA
     - **Control.1** DMA transfer direction 0=peripheral to memory, 1=memory to peripheral
  - **Address** start address of the memory region
  - **BlockSize** number of bytes for each DMA transfer.
  - **BlockNum** number of blocks before the memory buffer rotates, next DMA transfer uses start address.
  - **BlockIndex** counts the total number of blocks transferred. It gets set to 0 when DMA is enabled and also when buffer rotates.
 

*/
