/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/


//  ==== VIO Use Cases ====

/**
\defgroup   arm_vio_cases Using VIO
\ingroup arm_vio
\brief      Using Virtual I/O Interface (VIO)
\details

\ref arm_vio_api provides a general purpose implementation for simple I/O peripherals. This chapter shows how VIO can be applied in a specific use case.

__[./interface/vio/vio_fvp.c](https://github.com/ARM-software/AVH/tree/main/interface/vio/vio_fvp.c)__: implements [CMSIS-Driver VIO](https://arm-software.github.io/CMSIS_5/Driver/html/group__vio__interface__gr.html) for Arm Virtual Hardware based on the \ref ARM_VIO_Type structure and its mapping defined in *arm_vio.h*.

# Setup {#vio_setup}

Instructions below cover specifically setup for using CMSIS-Driver VIO in a project on Arm Fixed Virtual Platfom (FVP) as a target.

- Install following software packs in your development environment, if not available yet:
 - ARM::CMSIS pack for access to CMSIS-Driver VIO API header (*cmsis_vio.h*)
 - Pack with target device support for access to \ref arm_vio_api (*arm_vio.h*)
 .
The packs can be found on [CMSIS Packs page](https://developer.arm.com/tools-and-software/embedded/cmsis/cmsis-packs).
- Add to the project the *CMSIS-Driver:VIO (API):Custom* component that provides access to *cmsis_vio.c* file.
- Copy **[./interface/vio/vio_fvp.c](https://github.com/ARM-software/AVH/tree/main/interface/vio/vio_fvp.c)** file to your local project folder and add it to the project.

# Usage example {#vio_example}

After VIO is setup in the project, the interface can be fully used as described in [CMSIS-Driver VIO documentation](
https://arm-software.github.io/CMSIS_5/Driver/html/group__vio__interface__gr.html#details).

For example to control virtual LEDs:

\code
#include "cmsis_vio.h"                  // ::CMSIS Driver:VIO
 
int main (void) {
 
  vioInit();
  vioSetSignal(vioLED0, vioLEDon);
  // ...
  vioSetSignal(vioLED0, vioLEDoff);
}
\endcode

*/

//  ==== VSI Use Cases ====

/**
\defgroup   arm_vsi_cases VSI Use Cases
\ingroup arm_vsi
\brief      Use Cases for Virtual Streaming Interface (VSI)
\details

\ref arm_vsi is a general purpose peripheral for implementing data streaming support on Arm FVPs.

\ref arm_vsi_audio implements VSI-based audio data streaming with local audio wave file and so simulates audio I/O peripheral in the system.

\ref arm_vsi_video implements VSI-based video data streaming with local video or image files. Alternatively, PC's camera can be used as video input and PC's display as video output.

Other examples for VSI peripherals will be added in future as well.

*/


//  ==== VSocket Use Cases ====

/**
\defgroup   arm_vsocket_cases VSocket Use Cases
\ingroup arm_vsocket
\brief      Using Virtual Socket Interface (VSocket)
\details

\ref arm_vsocket_api provides a general purpose implementation for socket peripheral. This chapter shows how VSocket can be applied in specific use case.

__[./interface/vsocket/iot_socket.c](https://github.com/ARM-software/AVH/tree/main/interface/vsocket/iot_socket.c)__: implements the [IoT Socket](https://github.com/MDK-Packs/IoT_Socket) variant for Arm Virtual Hardware based on the \ref ARM_VSocket_Type structure and its mapping defined in *arm_vsocket.h*.

# Setup {#vsocket_setup}

Instructions below cover specifically setup for using IoT Socket API in a project using Arm Fixed Virtual Platform (FVP) as a target.

 - Verify that following packs are installed in your development environment:
  - ARM::CMSIS pack for access to CMSIS-RTOS2 API used by VSocket implementation.
  - [IoT Socket pack](https://github.com/MDK-Packs/IoT_Socket) for access to IoT Socket API header (*iot_socket.h*)
  - Pack with target device support for access to \ref arm_vsocket_api (*arm_vsocket.h*)
 - Select Virtual Hardware device as the target in the project. See in \ref Using.
 - Following components shall be selected as part of the project:
   - *CMSIS:CORE* for general device abstraction
   - *CMSIS:RTOS2 (API)* for RTOS2 API, 
   - *IoT Utility:Socket (API):Custom* component that provides access to *iot_socket.h* file.
 - Copy **[./interface/vsocket/iot_socket.c](https://github.com/ARM-software/AVH/tree/main/interface/vsocket/iot_socket.c)** file to your local project folder and add it to the project.
 
Note that VSocket does not require \ref semihosting to be enabled on the FVP model.

# Usage example{#vsocket_example}

After VSocket is added to the project the interface can be fully used as described in [IoT Socket documentation](
https://mdk-packs.github.io/IoT_Socket/html/index.html). For example:

\code
#include "iot_socket.h"                  // ::IoT Utility:Socket (API)
static const char message[] = { "The quick brown fox jumps over the lazy dog." };
 
void Echo_Client_Thread (void *arg) {
  uint8_t ip[4] = { 192U, 168U, 0U, 100U };
  int32_t sock, res;
  char dbuf[120];
 
  while (1) {
    sock = iotSocketCreate (IOT_SOCKET_AF_INET, IOT_SOCKET_SOCK_STREAM, IOT_SOCKET_IPPROTO_TCP);
 
    res = iotSocketConnect (sock, (uint8_t *)ip, sizeof(ip), 7U);
    if (res == 0) {
      while (1) {
        iotSocketSend (sock, message, sizeof(message));
        res = iotSocketRecv (sock, dbuf, sizeof(dbuf));
        if (res < 0) {
          break;               // Receive error
        }
        if (res > 0) {
          if (memcmp (dbuf, message, res) != 0) {
            break;             // Message error, echoed message is not the same
          }
        }
        osDelay (1000U);
      }
    }
    iotSocketClose (sock);
  }
}
\endcode

*/