/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
//  ==== VSI ====
/**
\defgroup arm_vsi Virtual Streaming Interface (VSI)
\ingroup arm_cmvp
\brief Data streaming interface for Cortex-M applications to Python scripting
\details

The Virtual Streaming Interface (VSI) is a flexible peripheral that allows to implement a wide range of use cases. 
It can be used to simulate data streaming such as audio, video and various sensors frequently found in Machine-Learning applications.
Eight VSI instances are available and may be used in parallel for simultaneous multi-channel streaming inputs and outputs.


Examples demonstrate the \ref arm_vsi_audio "Audio" streaming as shown in the diagram below.

\image html ./images/Example-Structure.png "Arm VHT CoreStone-300 for Linux and Windows"

The VSI implements general purpose peripheral registers, an interrupt peripheral, a timer peripheral, and a DMA peripheral. The following files define and the access to the VSI peripherals.

File                             | Description
:--------------------------------|:-----------------------------------
./interface/include/arm_vsi.h    | \ref arm_vsi_api "VSI API" header file
./interface/python/arm_vsi0.py   | \ref arm_vsi_py "VSI Python interface" script template for instance 0
  :                              |   :
./interface/python/arm_vsi7.py   | \ref arm_vsi_py "VSI Python interface" script template for instance 7

\section vsi_regs VSI registers
The VSI peripheral is accessed using the \ref ARM_VSI_Type structure that provides register interface for the following components:
  - Interrupt control
  - Timer peripheral with 1MHz input clock
  - DMA peripheral with block buffer handling
  - 64 user registers to implement bespoke functionality (i.e. for Audio, Video, or Sensor streaming)

There are 8 VSI peripheral instances mapped into the memory of the Cortex-M system. These are accessed via these defines:
\code{.unparsed}
#define ARM_VSI0        ((ARM_VSI_Type *)ARM_VSI0_BASE)      /*!< VSI 0 struct */
#define ARM_VSI1        ((ARM_VSI_Type *)ARM_VSI1_BASE)      /*!< VSI 1 struct */
#define ARM_VSI2        ((ARM_VSI_Type *)ARM_VSI2_BASE)      /*!< VSI 2 struct */
#define ARM_VSI3        ((ARM_VSI_Type *)ARM_VSI3_BASE)      /*!< VSI 3 struct */
#define ARM_VSI4        ((ARM_VSI_Type *)ARM_VSI4_BASE)      /*!< VSI 4 struct */
#define ARM_VSI5        ((ARM_VSI_Type *)ARM_VSI5_BASE)      /*!< VSI 5 struct */
#define ARM_VSI6        ((ARM_VSI_Type *)ARM_VSI6_BASE)      /*!< VSI 6 struct */
#define ARM_VSI7        ((ARM_VSI_Type *)ARM_VSI7_BASE)      /*!< VSI 7 struct */
\endcode

A read or write access to a VSI peripheral triggers execution of a Python script that implements corresponding instance of \ref arm_vsi_py "VSI Python interface". The python scripts are named as **arm_vsi0.py**, **arm_vsi1.py**, ..., **arm_vsi7.py**. The concept is shown on the figure below.

\image html "uml_graph.png" "Using VSI peripheral"

The \ref ARM_VSI_Type structure is defined in arm_vsi.h file as follows:

\code{.unparsed}
typedef struct
{
  struct {
    __IOM uint32_t Enable;      /*!< Offset: 0x0000 (R/W) IRQ Enable */
    __OM  uint32_t Set;         /*!< Offset: 0x0004 (-/W) IRQ Set */
    __OM  uint32_t Clear;       /*!< Offset: 0x0008 (-/W) IRQ Clear */
    __IM  uint32_t Status;      /*!< Offset: 0x000C (R/-) IRQ Status */
  } IRQ;                        /*!< Interrupt Request (IRQ) */
  uint32_t reserved1[60];
  struct {
    __IOM uint32_t Control;     /*!< Offset: 0x0100 (R/W) Timer Control */
    __IOM uint32_t Interval;    /*!< Offset: 0x0104 (R/W) Timer Interval Value (in microseconds) */
    __IM  uint32_t Count;       /*!< Offset: 0x0108 (R/-) Timer Overflow Count */
  } Timer;                      /*!< Time counter with 1MHz input frequency */
  uint32_t reserved2[61];
  struct {
    __IOM uint32_t Control;     /*!< Offset: 0x0200 (R/W) DMA Control */
    __IOM uint32_t Address;     /*!< Offset: 0x0204 (R/W) DMA Memory Start Address */
    __IOM uint32_t BlockSize;   /*!< Offset: 0x0208 (R/W) DMA Block Size (in bytes, multiple of 4) */
    __IOM uint32_t BlockNum;    /*!< Offset: 0x020C (R/W) DMA Number of Blocks (must be 2^n) */
    __IM  uint32_t BlockIndex;  /*!< Offset: 0x0210 (R/-) DMA Block Index */
  } DMA;                        /*!< Direct Memory Access (DMA) Controller */
  uint32_t reserved3[59];
  __IOM uint32_t Regs[64];      /*!< Offset: 0x0300 (R/W) User Registers */
} ARM_VSI_Type;
\endcode

The **IRQ** peripheral simulates an interrupt request. **Set** and **Clear** parameters have only write access and are used for triggering and clearing the interrupt. **Status** field indicates the interrupt state.

The **Timer** peripheral is a simple counting timer with a 1MHz input frequency based on the time domain 
of the Arm Fast Model instruction set simulator. The **Count** value increments when the **Interval** value elapses.

The **DMA Controller** accesses a rotating memory buffer as shown in the diagram below. Each block transfer increments the **BlockIndex** value (restarts when the buffer rotates).

\image html "DMA_Buffer.png" "Structure of DMA memory buffer"

*/

