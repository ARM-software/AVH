/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
//  ==== VSI ====
/**
\defgroup arm_vsi Virtual Streaming Interface (VSI)
\ingroup arm_cmvp
\brief Data streaming interface
\details

The **Virtual Streaming Interface (VSI)** is a flexible memory-mapped peripheral available in Arm Fixed Virtual Platforms (FVPs). It can be used to simulate data streaming interfaces such as audio, video and various sensors often found in IoT and Machine-Learning applications.
The VSI is provided in 8 independent instances that can be used in parallel for multi-channel input/ouput interfaces.

Figure below illustrates the concept behind the VSI on Arm FVPs.

\image html ./images/vsi_structure.png "Using the Virtual Streaming Interface (VSI)"

- On the application firmware side a peripheral driver uses the \ref arm_vsi_api "VSI registers" in the FVP model to simulate peripheral operation for a target use case.
By relying on common driver APIs the same application-level code can be reused for FVPs and real hardware targets.

- Read/write accesses to the VSI peripheral registers in the FVP trigger execution of corresponding callback functions in 
the \ref arm_vsi_py "VSI Python scripts" that implement peripheral behavior in the target scenario.

- An FVP model can be run on a host OS and executes the target firmware application image.
The path to the VSI python scripts shall be provided to the FVP using the model configuration parameter `v_path`, that depending on the model is part of the `mps2_board`, `mps3_board` or `mps4_board` component. Section \ref Execution gives an example.
 
Section \ref arm_vsi_cases explains in details the reference implementations of VSI-based peripherals.
Specifically \ref arm_vsi_audio implementing audio streaming input from a local audio wave file and \ref arm_vsi_video implementing video streaming from a local video or image file.

Access to the VSI peripherals is defined in the following files:

File                             | Description
:--------------------------------|:-----------------------------------
./interface/include/arm_vsi.h    | \ref arm_vsi_api "VSI API" header file
./interface/python/arm_vsi0.py   | \ref arm_vsi_py "VSI Python interface" script template for instance 0
  :                              |   :
./interface/python/arm_vsi7.py   | \ref arm_vsi_py "VSI Python interface" script template for instance 7

An example flow for using the VSI peripheral is shown on the figure below:

\image html "using_vsi_uml.png" "Example flow for using the VSI peripheral"

\defgroup arm_vsi_pyenv Python environment
\ingroup arm_vsi
\brief Python environment for Arm FVPs
\details

Arm FVPs require an installation of <b>Python 3.9</b> for running the Python virtual interfaces. If you are using a Windows machine you can use an embedded Python installation in FVPs root directory, otherwise a system installation is required.
Additional Python packages can be added using \em pip. In case you are using embedded Python installation see section: \ref embedded-pip-vsi

# Python requirements
The following packages are required on Linux systems (Ubuntu 20.04 and later):
- \em libatomic1
- \em libpython3.9
- \em python3-pip

Run the following command to install required packages on Ubuntu:
\code{.sh}
sudo apt install libatomic1 libpython3.9 python3-pip
\endcode

# Install additional packages in embedded Python {#embedded-pip-vsi}
By default the embedded Python installation on Windows does not support installation of new packages using pip. To enable installing new packages follow the steps described below.
- Download [get-pip.py](https://bootstrap.pypa.io/get-pip.py) to the FVPs root directory.
- Uncomment the following line in the \b python39._pth file.
  \code {.sh}
  import site
  \endcode
- Open command prompt in the FVPs root directory and run the following command.
  \code {.sh}
  .\python.exe get-pip.py
  \endcode
- Install new packages using:
  \code {.sh}
  .\python.exe -m pip install <package>
  \endcode
  The packages will be installed in <code>Lib\\site-packages</code> subfolder.

# Known issues
- Some Python packages can't be imported directly in the Python virtual interfaces, because they are incompatible with Python sub-interpreters (e.g. \em numpy). Possible workaround for this issue is to split the Python module into client and server scripts.
- Fast Models (Version 11.22.39) available through vcpkg include a stripped-down version of libpython3.9 library on Linux systems. This can cause the Fast Model to close with an error (<em>VSI:Video:ImportError: No module named '_posixsubprocess'</em>) when running applications with VSI.  
  Current workaround:
    - Rename or remove included \em libpython3.9.so.1.0 file, located in the vcpkg installation folder  
      (e.g. ~/.vcpkg/artifacts/fd3d78d7/models.arm.avh.fvp/11.22.39/bin/models).
    - Install libpython3.9 using the system package manager.

*/
